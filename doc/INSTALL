
RTschedule INSTALL
rtschedule.sf.net



DEPENDENCIES:

RTschedule is written in Fortran, hence you will need a Fortran compiler.  Gfortran,
part of gcc, is a free, open-source Fortran compiler included in many GNU/Linux 
distributions and available from https://gcc.gnu.org/fortran/.  

The default installer uses CMake to configure and compile the code.  CMake is also 
open-source software, also included in most GNU/Linux distributions, and can be 
downloaded from http://www.cmake.org/.  Alternatively, you can create your own 
Makefile or compile and link the code manually.

RTschedule needs the Fortran library libSUFR in order to compile and run.  libSUFR is
free and open software, and available under the GPL v3 from http://libsufr.sf.net/.

If you want graphical output, the PLplot library must be installed during compile and
run time.  PLplot is also free and open software, and is available under the LGPL-2
licence from http://plplot.sourceforge.net/


UNPACKING:

If you downloaded a release version (e.g. from rtschedule.sf.net), you can unpack the 
tarball and cd into its directory by doing e.g.:

  $ tar xfz rtschedule-0.0.1.tar.gz
  $ cd rtschedule-0.0.1/

(replace "0.0.1" with the correct version number).

Alternatively, you may have cloned the git repository from 
https://github.com/MarcvdSluys/RTschedule.git
git://git.code.sf.net/p/rtscheduling/code


CONFIGURING, COMPILING AND INSTALLING:

To configure, compile and install the code (in the CMake (not Linux! - NOT RECOMMENDED
- see below) default system directories /usr/local/...), from the main package 
directory (the one that contains the file CMakeLists.txt), do:

 $ mkdir build && cd build/
 $ cmake ..
 $ make
 $ sudo make install

The second step above configures the code and should find your Fortran compiler and
libSUFR.  The third step compiles and links the code, and the last step installs it 
on your system - for which you need root priveliges, hence the 'sudo' command.


To install the package in a specific system directory, e.g. the Linux default /usr/...
(RECOMMENDED), do:

 $ mkdir build && cd build/
 $ cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..
 $ make
 $ sudo make install


To install the package in your own user directory, you don't need root priveliges,
can omit the 'sudo' command and combine the last two commands, e.g.:

 $ mkdir build && cd build/
 $ cmake -DCMAKE_INSTALL_PREFIX:PATH=/home/me/usr ..
 $ make install


To compile the code with your favourite compiler (in case you have several installed),
prepend the cmake line with e.g. FC=gfortran:

 $ FC=gfortran cmake ..


If you have multiple cores or processors, you can speed up the make step by specifying
the number of parallel build jobs using the -j option.  E.g., for four cores, you can
have four parallel jobs and use:

 $ make -j4


To compile the code without installing it anywhere, leave out the install step
 
 $ mkdir build && cd build/
 $ cmake ..
 $ make

The compiled binary executable can then be found in the usr/ subdirectory of the
package dir.


On a Linux system, the binary executable file could be installed as:
/usr/bin/rtschedule


CETERA:

If you run into problems or have questions, please feel free to contact Marc van der Sluys 
(preferably by email) through han.vandersluys.nl or rtschedule.sf.net

